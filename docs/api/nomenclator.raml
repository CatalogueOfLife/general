#%RAML 1.0
title: Unified Nomenclator API
documentation:
- title: Introduction
  content: |
    The unified nomenclator developed by [Catalogue of Life plus](https://github.com/Sp2000/colplus) tracks scientific names across all life and ties them to literature and types.
    It tracks recombinations and provides a place for collaborative editorial efforts and review.
version: v1
baseUri: https://api.col.plus
protocols: [ HTTPS ]
securitySchemes:
  basic:
    type: Basic Authentication
    description: |
      Supported for authenticating all API requests.
  oauth_2_0:
    description: |
      Supported for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
             Used to send a valid OAuth 2 access token. Do not use
             with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
             Used to send a valid OAuth 2 access token. Do not use with
             the "Authorization" header.
          type: string
      responses:
        401:
          description: |
              Bad or expired token. This can happen if the user or system
              revoked or expired an access token. To fix, re-authenticate
              the user.
        403:
          description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://www.sciname.com/oauth2/authorize
      accessTokenUri: https://api.sciname.com/oauth2/token
      authorizationGrants: [ authorization_code, implicit ]
mediaType:  application/json
resourceTypes:
  pageable:
    get:
      description: Page through all <<class>>
      is: [paged]
      responses:
        200:
          body: <<class>>ResultSet
  searchable:
    get:
      description: Search through all <<class>>
      is: [paged]
      queryParameters:
        q:
          type: string
          description: full text search query
      responses:
        200:
          body: <<class>>ResultSet
  collection:
    usage: Use this resourceType to represent a collection of items that offer a create method.
    get:
      description: Page through all <<resourcePathName>>s, optionally filtered
      is: [paged]
      responses:
        200:
          body: <<resourcePathName | !uppercamelcase>>[]
    post:
      description: Create a new <<resourcePathName | !uppercamelcase>>
      is: [secured, creating]
      body: <<resourcePathName | !uppercamelcase>>

  modifiable:
    usage: A single, modifiable and versioned resource with read, update & delete methods.
    get:
      description: Get a <<class>> by its key
      is: [versioned]
      responses:
        200:
          body: <<class>>
        404:
          body: Error
    put:
      is:  [secured]
      description: Update a <<class>>
      body: <<resourcePathName | !uppercamelcase>>
      responses:
        200:
          body:
            type: integer
            example: 7
            description: the newly created object version
    delete:
      is:  [secured]
      description: Delete a <<class>>
      responses:
        204:
traits:
  secured: # TODO
      usage: Apply this to any method that needs to be secured
      description: Some requests require authentication.
      headers:
        access_token:
          description: Access Token
          example: 5757gh76
          required: true
  versioned:
    usage: Apply this to all versioned resource GET methods
    description: Optional version parameter to retrieve a specific version.
    queryParameters:
      version:
        type: integer
        required: false
        description: The requested specific version of the resource
  paged:
    usage: Apply this to any method that needs paging parameters
    description: Paging parameters.
    queryParameters:
      offset:
        type: integer
        required: false
        description: The requested number of offset records
      limit:
        type: integer
        required: false
        description: The requested page, defaulting to 1 for the first page
  creating:
    responses:
      201:
        headers:
          Location:
            type: string
            example: http://api.col.plus/name/1234
            description: the absolute resource URL of the newly created object
        body:
          type: integer
          description: the newly created object key. In case of versioning the initial version=1
          example: 79508
types:
  RankType:
    type: string
    enum: ["kingdom", "phylum", "class", "order", "family", "genus", "species", "subspecies"]
    description: >
      Enumeration of all possible rank values.
      There is the need to deal with old ranks not accepted anymore.
      The list given is intended to be interoperable between name providers for bacteria, viruses, fungi, plants, and animals.
      The enumeration attempts to strike a balance between listing all possible rank terms, and remaining comprehensible.
      Not included in the list are the botanical "notho-" ranks, which are used to designate hybrids (nothospecies, nothogenus) as this information is handled by the Name.notho property already.

      Sources:

       - [GBIF](https://github.com/gbif/gbif-api/blob/master/src/main/java/org/gbif/api/vocabulary/Rank.java)
       - [TCS](https://github.com/tdwg/tcs/blob/master/TCS101/v101.xsd#L860)
       - [TaxCat2](http://mansfeld.ipk-gatersleben.de/apex/f?p=185:78:::NO::P77_TAXCAT,P77_DB_CHECKBOX1,77_TAXCAT2RAD,77_SHOWRAD:%25,,0,s_All)
       - [NOMEN](https://raw.githubusercontent.com/SpeciesFileGroup/nomen/master/src/ontology/nomen.owl)

       TODO: extract all values from sources
  NameType:
    type: string
    enum: ["scientific", "virus", "hybrid-formula", "cultivar", "otu", "placeholder", "none"]
    description: Classification of names, mostly based on their syntactic structure.
  NomenclaturalActType:
    type: string
    enum: ["description", "typification", "ruling", "emendation"]
    description: >
      Coarse classification of nomenclatural acts.

       - *description* covers original descriptions, new recombinations and changes in rank.
       - *typification* is used for subsequent type designations.
       - *ruling* acts are e.g. suppressed or conserved names.
       - *emendation* are intentional changes in the original spelling of an available name.
  Error:
    type: object
    description: >
      An error response.
    properties:
      status:
        type: integer
        description: http status code
      message:
        type: string
        description: Error message
    example: |
      {
        "status": 404,
        "message": "Name 467324, version 7 not found"
      }
  ResultSet:
    type: object
    description: >
      A paging resultset without the actual type specific result payload.
    properties:
      offset:
        type: integer
        description: >
          The offset applied during request.
          Can be less than requested if the limit is reached.
      limit:
        type: integer
        description: >
          The maximum number of records returned.
          Can be less than requested if the limit is reached.
      total:
        type: integer
        description: >
          The total number of records available.
  Created:
    type: object
    description: >
      The common properties for objects created by contributors.
    properties:
      created:
        type: datetime
        description: timestamp the object was created
        required: false
      createdBy:
        type: string
        description: contributor key that created the object
        required: false
  Versioned:
    type: Created
    description: >
      The common properties for versioned objects.
    properties:
      key:
        type: integer
        description: the primary key for the object for all its versions
      version:
        type: integer
        description: specific version of the object in chronological order starting with 1 when the object was created
  Name:
    type: Versioned
    description: |
      A scientific name.
      CoL deals and categorizes the following types of names:

       - Linnaean names, i.e. mono-, bi- or trinomials
       - Named hybrids and nothotaxa
       - Virus names

      A name includes it's authorship. Two homonyms with different authors therefore represent two different name entities.

      ### Lexical variations

      The same name can usually be represented by many different strings which we refer to as lexical variations.
      For each name a standard representation, the canonical form, exists.

      Lexical variations exist for various reasons.
      Author spelling, transliterations, epither gender, additional infrageneric or infraspecific indications, cited species authors in infraspecific names are common reasons.
      Listed here are 7 distinct names with some of their string representations:

      ```
       1. Aus bus Linnaeus 1758
          - Aus bus Linn. 1758
          - Aus bus Linn 1758
          - Aus bus L.
          - Aus ba Linn 1758.
          - Aus (Hus) bus L.

       2. Xus bus (Linn, 1758)
          - Xus bus (Linn) Smith

       3. Xus cus Smith, 1850
          - Xus cus Sm.

       4. Xus cus Jones 1900

       5. Xus bus cus Smith 1850
          - Xus bus subsp. cus Smith 1850

       6. Xus dus Pyle 2000

       7. Foo bar var. lion Smith 1850
          - Foo bar L. var. lion Smith
          - Foo bar subsp. dar var. lion Smith 1850
          - Foo bar Lin. subsp. dar Mill. var. lion Smith 1850
      ```

      New names (**sp./gen. nov.**),
      new recombinations of the same epithet (**comb. nov.**),
      a name at a new rank (**stat. nov.**)
      or replacement names (**nom. nov.**) are all treated as distinct names.

      ### Homotypic group & original name
      Names based on the same type can be clustered together as a homotypic group of names.
      A homotypic group not only includes all subsequent recombinations, but also any [replacement name](https://en.wikipedia.org/wiki/Nomen_novum) if existing.
      These names are homotypic synonyms, also called nomenclatural or objective synonyms.

      The first, originally published name is used to represent such a group as it is a clean proxy to the type specimen,
      therefore every name in a homotypic group points back to the same original name.

      Protonym in zoology and basionym in botany are terms for a very similar concept, but they do not include replacement names and are rather code specific
      so we will refer to *original name* here instead, inline with Darwin Core terminology.
      Original names are not necessarily Code-compliant original descriptions, but usually they are.

      The above names can be clustered into four sets of homotypic synonym groups, shown with canonical authorship:

      ```
       1. Aus bus Linnaeus 1758
          - Aus ba Linnaeus 1758 [orthographic variant]
          - Xus bus (Linnaeus 1758) Smith 1850 [alternate combination]

       2. Xus cus Smith 1850
          - Xus bus subsp. cus Smith 1850 [alternate rank]

       3. Xus cus Jones 1900 (heterotypic homonym of Xus cus Smith 1850)
          - Xus dus Pyle 2000 [replacement name for Xus cus Jones]

       4. Foo bar var. lion Smith 1850
      ```

      #### comb. nov. in ICZN vs ICN

      One of the most notable differences between [ICN](http://www.iapt-taxon.org/nomen/)
      and [ICZN](http://www.nhm.ac.uk/hosted-sites/iczn/code/) is the way names are cited when a species is placed in a different genus from the one it was originally published in (a comb. nov.).
      Botanists have a convention of always citing the authors of the original combination in brackets followed by the names of the authors of the combination.
      Zoologists don't follow this convention, they simply place the author of the original combination in brackets for the new combination and don't cite the authors who were first to make the new combination.
      This difference is cosmetic. Indeed [ICZN Recommendation 51G](http://www.nhm.ac.uk/hosted-sites/iczn/code/index.jsp?article=51) is that new combinations in zoology should be quoted in a similar way to the way they are quoted in botany.

      *Basionym* is a well established term in the ICN where it is defined that
      a "basionym provides the final epithet, name, or stem of the new combination or name at new rank" (ICN Art. 6.10 & Art. 41).
      It is the orginal combination of a name as viewed from a new combination. The basionym is therefore always relative to a new combination.
      A name can't be a basionym in its own right only relative to another name.
      ICZN does not mention the term basionym but the notion is clearly present in zoological nomenclature as zoologists also have the concept of the new recombination of a name.
    properties:
      key:
        type: integer
        description: the unique key, i.e. scientificNameID
      scientificName:
         type: string
         description: full string incl authorship and rank marker for infragenerics and infraspecfics
      canonicalName:
        type: string
        description: plain name made from 1-3 name epithets only, exluding authors and rank markers
        required: false
      nomenclaturalCode:
        type: string
        enum: ["ICN", "ICZN", "ICNB", "ICTV"]
        description: >
          [ICN](http://www.iapt-taxon.org/nomen/) Algae, Fungi and Plants,
          [ICZN](http://www.nhm.ac.uk/hosted-sites/iczn/code/) Animals,
          [ICNB](https://www.ncbi.nlm.nih.gov/books/NBK8817/) Bacteria,
          [ICTV](https://talk.ictvonline.org/information/w/ictv-information/383/ictv-code) Virus
      uninomial:
        type: string
        description: for names at higher rank than genus, e.g. a family name
        required: false
      genus:
        type: string
        description: the genus part of a name
        required: false
      infragenericEpithet:
        type: string
        description: the infrageneric epithet. Used only as the terminal epithet for names at infrageneric ranks, not for species
        required: false
      specificEpithet:
        type: string
        description:
        required: false
      infraspecificEpithet:
        type: string
        description:
        required: false
      rank:
        type: RankType
        description: rank of the name from enumeration above
      notho:
        type: string
        enum: [ "generic", "infrageneric", "specific", "infraspecific" ]
        description: the part of the name which is considered a hybrid;  see [GBIF](https://github.com/gbif/gbif-api/blob/master/src/main/java/org/gbif/api/vocabulary/NamePart.java#L24)
        required: false
      authorship:
        type: string
        description: full string
        required: false
      originalAuthors:
        type: Author[]
        description: list of NameAuthor entities
        required: false
      originalYear:
        type: integer
        description: year of original name publication
        required: false
      combinationAuthors:
        type: Author[]
        description: list of NameAuthor entities excluding ex- authors
        required: false
      combinationYear:
        type: integer
        description: year of combination publication, usually the same as publishedIn reference
        required: false
      originalNameKey:
        type: integer
        description: link to the original name. In case of [replacement names](https://en.wikipedia.org/wiki/Nomen_novum) it points back to the replaced synonym.
        required: false
      isOriginalName:
        type: boolean
        description: true if the name was an original description, i.e. protonym or basionym
      isReplacement:
        type: boolean
        description: flag to indicate that this name is a replacement name
      isCodeCompliant:
        type: boolean
        description: flag to indicate that this name is available/validly published
      remark:
        type: string
        description: notes for general remarks on the name
        required: false
    example: |
      {
        "key": 21242,
        "scientificName": "Crepicnema parvula (Jacoby, 1885)",
        "canonicalName": "Crepicnema parvula",
        "nomenclaturalCode": "ICZN",
        "genus": "Crepicnema",
        "specificEpithet": "parvula",
        "rank": "species",
        "authorship": "(Jacoby, 1885)",
        "originalAuthors": [{"key":10789, "surname": "Jacoby", "version": 2}],
        "originalYear": 1885,
        "originalNameKey": 8673,
        "isOriginalName": false,
        "isReplacement": false,
        "isCodeCompliant": true,
        "version": 11,
        "created": "2017-01-28T16:41:41.090Z",
        "createdBy": "charles.d"
      }
  NameResultSet:
    type: ResultSet
    description: >
      A paging resultset for Names.
    properties:
      results:
        type: Name[]
        description: the resulting names
  Author:
    type: Versioned
    description: >
      A person that is an author of scientific names. Not to be used for Reference authors.
      The actual name string of the author can vary similar to scientific names due to spelling, transliteration, aliases, marriage or other name changes over time.
      e.g., "Carlolus Linnaus", "Carl Linnaus", "Carl von Linné", etc.
    properties:
      firstname:
        type: string[]
        description: the preffered full first name(s) separated by whitespace
        required: false
      surname:
        type: string
        description: full last name incl prefixes like "van" if existing
      aliases:
        type: string[]
        description: list of alternative representations (surname, firstname)
        required: false
      yearOfBirth:
        type: integer
        description: year the person was born
        required: false
        minimum: 1500
        maximum: 2020
      yearOfDeath:
        type: integer
        description: year the person died
        required: false
        minimum: 1500
        maximum: 2020
      areaOfInterest:
        type: string[]
        description: systematic groups of interest to the author
        required: false
      biography:
        type: string
        description: short description of the persons (work) life
        required: false
      collections:
        type: string[]
        description: collection codes known to host type material for species described by the author
        required: false
    example: |
      {
        "key": 1563,
        "firstname": ["Augustin-Pyrame"],
        "surname": "de Candolle",
        "aliases": ["Augustin-Pyramus de Candolle", "DC."],
        "yearOfBirth": 1778,
        "yearOfDeath": 1841,
        "areaOfInterest": ["Pteridophytes", "Mycology", "Bryophytes", "Spermatophytes"],
        "biography": "Augustin Pyramus de Candolle also spelled Augustin Pyrame de Candolle (4 February 1778 – 9 September 1841) was a Swiss botanist. René Louiche Desfontaines launched de Candolle's botanical career by recommending him at an herbarium. Within a couple of years de Candolle had established a new genus, and he went on to document hundreds of plant families and create a new natural plant classification system. Although de Candolle's main focus was botany, he also contributed to related fields such as phytogeography, agronomy, paleontology, medical botany, and economic botany. Candolle originated the idea of Nature's war, which influenced Charles Darwin and the principle of natural selection.[1] de Candolle recognized that multiple species may develop similar characteristics that did not appear in a common evolutionary ancestor; this was later termed analogy. During his work with plants, de Candolle noticed that plant leaf movements follow a near-24-hour cycle in constant light, suggesting that an internal biological clock exists. Though many scientists doubted de Candolle's findings, experiments over a century later demonstrated that ″the internal biological clock″ indeed exists. Candolle's descendants continued his work on plant classification. Alphonse de Candolle and Casimir Pyrame de Candolle contributed to the Prodromus Systematis Naturalis Regni Vegetabilis, a catalog of plants begun by Augustin Pyramus de Candolle.",
        "collections": [],
        "version": 1,
        "created": "2016-02-28T16:41:41.090Z",
        "createdBy": "deko"
      }
  AuthorResultSet:
    type: ResultSet
    description: >
      A paging resultset for Authors.
    properties:
      results:
        type: Author[]
        description: the resulting Authors
  NomenclaturalAct:
    type: Versioned
    description: A published act which affects the nomenclatural status of a scientific name or the typification of a nominal taxon.
    properties:
      key:
        type: integer
        description: the unique key, i.e. scientificNameID
      nameKeys:
         type: integer[]
         description: keys to the names the act is about
      type:
         type: NomenclaturalActType[]
         description: Coarse classification of acts.
      description:
        type: string
        description: A desription of the details of the nomenclatural act
        required: false
      referenceKey:
        type: integer
        description: Key to reference in which the act was published
        required: false
      referencePage:
        type: string
        description: exact first page of the treatment within above reference
        required: false
      referenceLink:
        type: string
        description: URL to the first page of the treatment, e.g. in BHL, BioStor or Zenodo
        required: false
      bhlPageId:
        type: integer
        description: BHL PageID for the first page of the treatment
        required: false
    example: |
      {
        "key": 721141,
        "type": ["description"],
        "nameKeys": [78612],
        "referenceKey": 786,
        "referencePage": "5",
        "referenceLink": "http://www.europeanjournaloftaxonomy.eu/index.php/ejt/article/view/354/725",
        "version": 2,
        "created": "2017-01-28T16:41:41.090Z",
        "createdBy": "carlos"
      }
  Serial:
    type: Versioned
    description: A journal or other series used as containers for references
    properties:
      aliases:
        type: string[]
        description: Alternative titles known for the serial
        required: false
      bph:
        type: string
        description: >
          [BPH Online](http://huntbotanical.org/databases/show.php?1) identifier. Botanic periodicals published between 1665 and the present.
        required: false
      call:
        type: string
        description: library of congress classification number
        required: false
      tl2:
        type: string
        description: TL2 number
        required: false
      oclc:
        type: integer
        description: OCLC number
        required: false
      bhl:
        type: integer
        description: BHL title number
        required: false
      jstor:
        type: string
        description: link to JSTOR
        required: false
      firstYear:
        type: integer
        description: First year the serial was published
        required: false
      lastYear:
        type: integer
        description: Last year the serial was published. Empty for current journals
        required: false
      csl:
        type: object
        description: >
          the journal metadata as [CSL-JSON](https://github.com/citation-style-language/schema#csl-json-schema),
          see [CSL JSON schema](https://github.com/citation-style-language/schema/blob/master/csl-data.json)
      notes:
        type: string
        description: Notes about the serial
        required: false
    example: |
      {
        "key": 432561,
        "version": 3,
        "created": "2016-02-28T16:41:41.090Z",
        "createdBy": "markus",
        "bph": "460.06",
        "tl2": "11.084",
        "call": "QK1.J55",
        "oclc": 1754397,
        "bhl": 68922,
        "firstYear": 1799,
        "lastYear": 1804,
        "csl": {
          "call-number": "QK1.J55",
          "type":"journal",
          "title":"Journal für die Botanik",
          "title-short":"J. Bot. (Schrader)",
          "editor":[{"family":"Schrader","given":"H. A."}],
          "publisher-place": "Göttingen"
        }
      }
  SerialResultSet:
    type: ResultSet
    description: >
      A paging resultset for Serials.
    properties:
      results:
        type: Serial[]
        description: the resulting Serials
  Reference:
    type: Versioned
    description: |
      A (literature) reference mostly given in [CSL-JSON](https://github.com/citation-style-language/schema#csl-json-schema).
      A reference can be linked to a serial, e.g. a journal, that defines the content for the CSL container attributes.

      Treatments are the section of a publication that deals with a single scientific name.
      They are a unit of citation below articles. [Plazi](http://www.plazi.org) is based on them
      and Taxon Name Usages (TNU) in [GNUB](http://globalnames.org/docs/gnub/) correspond to treatments.

      The ability to link to the treatment of a name is very useful. It is accomplished in the NomenclaturalAct class,
      but not dealt with on the shared Reference instances.
    properties:
      serialKey:
        type: integer
        description: key to container serial
        required: false
      csl:
        type: object
        description: |
          the citation metadata as [CSL-JSON](https://github.com/citation-style-language/schema#csl-json-schema),
          see [CSL JSON schema](https://github.com/citation-style-language/schema/blob/master/csl-data.json).
    example: |
      {
        "key": 432561,
        "version": 3,
        "created": "2016-02-28T16:41:41.090Z",
        "createdBy": "markus",
        "serialKey": 17,
        "csl": {
          "DOI":"10.1038/nrd842",
          "type":"article-journal",
          "author":[{"family":"Atkins","given":"Joshua H."},{"family":"Gershell","given":"Leland J."}],
          "title":"From the analyst's couch: Selective anticancer drugs",
          "container-title":"Nature Reviews Drug Discovery",
          "volume":"1",
          "issue":"7",
          "issued":{"date-parts":[[2002,7]]},
          "page":"491-492"
        }
      }
  ReferenceResultSet:
    type: ResultSet
    description: >
      A paging resultset for References.
    properties:
      results:
        type: Reference[]
        description: the resulting References
  Type: #TODO
    type: Versioned
    description: >
      tbd
    properties:
  TypeResultSet:
    type: ResultSet
    description: >
      A paging resultset for Types.
    properties:
      results:
        type: Type[]
        description: the resulting Types
  Contributor:
    type: object
    description: >
      A contributor to the system.
      Most of the time a human user but can also be bots which are augmenting data for review.
    properties:
      key:
        type: string
        description: the lower case account name and primary key of the contributor
      type:
        type: string
        enum: [user, bot]
        description: type of contributor
      name:
        type: string
        description: full real world name
      email:
        type: string
        description: a users email address
      authorKey:
        type: integer
        description: the author key in case the contributor is a name author himself
        required: false
      orcid:
        type: string
        description: ORCID identifier
        required: false
      avatarUrl:
        type: string
        description: link to an avatar thumbnail image
        required: false
      homepage:
        type: string
        description: URL to external user homepage
        required: false
      description:
        type: string
        description: A short description of the contributor
        required: false
      created:
        type: datetime
        description: timestamp the contributor was registered
      status:
        type: string
        enum: [unverified, active, blocked]
        description: contributors state
  ContributorResultSet:
    type: ResultSet
    description: >
      A paging resultset for Contributor.
    properties:
      results:
        type: Contributor[]
        description: the resulting Contributor
  Source:
    type: object
    description: Source (GSD) metadata
    properties:
      name:
        type: string
        description: Full name of the source database
      abbreviatedName:
        type: string
        description: Abbreviated name of the source database
      abstract:
        type: string
        description: Optional free text field describing the source database
        required: false
      groupName:
        type: string
        description: Name in English of the group(s) treated in the database
      authorsAndEditors:
        type: string
        description: Optional author(s) and editor(s) of the source database
        required: false
      organisation:
        type: string
        description: Optional organisation which has compiled or is owning the source database
        required: false
      contactPerson:
        type: string
        description: Optional contact person of the source database
        required: false
      version:
        type: string
        description: Optional version number of the source database ???
        required: false
      releaseDate:
        type: string
        description: Optional most recent release date of the source database
        required: false
      taxonomicCoverage:
        type: string
        description:
        required: false
      coverage:
        type: string
        description:
        required: false
      completeness:
        type: string
        description:
        required: false
      confidence:
        type: string
        description:
        required: false
      homepage:
        type: string
        description: Homepage of the source
        required: false
      dataFormat:
        type: string
        enum: ["dwca", "tcs", "xls", "other"]
        description: data format
        required: false
      dataAccess:
        type: string
        description: URL to access the source data
        required: false
  Comment:
    type: Created
    description: >
      A user comment on some entity.
    properties:
      key:
        type: integer
        description: the primary key of the change
      objectKey:
        type: integer
        description: the key of the object that was commented on
      objectType:
        type: string
        enum: [ScientificName, NameAuthor, Reference, Type]
        description: the type of object that was commented on
      text:
        type: string
        description: the comment in markdown
  Change:
    type: Created
    description: >
      A description of a change between two object versions
      TODO: rework diff and object linkage
    properties:
      key:
        type: integer
        description: the primary key of the change
      objectKey:
        type: integer
        description: the key of the object that was changed
      objectType:
        type: string
        enum: [ScientificName, NameAuthor, Reference, Type]
        description: the type of object that was changed
      diff:
        type: object
        description: the changes as the diff between previous and new version
      actKey:
        type: integer
        description: key to a published nomenclatural act that is the source for the change
        required: false


/name:
  type: collection
  /{key}:
    type:  { modifiable: {class : "Name"} }
    uriParameters:
      key:
        type: integer
        description: name key
    /activity:
      get:
        description: get list of recent changes and comments in chronological order
        responses:
          200:
            body: (Comment | Change)[]
    /synonyms:
      get:
        description: get list of all homotypic synonyms
        responses:
          200:
            body: Name[]
    /publishedIn:
      get:
        description: return the reference where the name was first published, i.e. the original description or recombination
        responses:
          200:
            body: Reference
    /acts:
      get:
        description: list all nomenclatural acts for the name in chronological order
        queryParameters:
          homotypic:
            type: boolean
            description: if true include also all acts about any name from the homotypic group (i.e. protonym)
            default: false
        responses:
          200:
            body: NomenclaturalAct[]
  /search:
    type:  { searchable: {class : "Name"} }
    get:
      description: search all names
      queryParameters:
        rank:
          type: string
          description: filter by rank
          required: false
        type:
          type: string
          description: filter by name type
          required: false
/author:
  type: collection
  /{key}:
    description: get author by its key
    type:  { modifiable: {class : "Author"} }
    uriParameters:
      key:
        type: integer
        description: author key
    /activity:
      get:
        description: get list of recent changes and comments in chronological order
        responses:
          200:
            body: (Comment | Change)[]
    /names:
      type:  { pageable: {class : "Name"} }
      get:
        description: get list of all names that have been described by the author
  /search:
    type:  { searchable: {class : "Author"} }
    get:
      queryParameters:
        q:
          type: string
          description: full text search on the complete author name and its aliases
        year:
          type: string
          description: filter by year the authors were knwon to be alive
/reference:
  type: collection
  /{key}:
    type:  { modifiable: {class : "Reference"} }
    uriParameters:
      key:
        type: integer
        description: reference key
    /activity:
      get:
        description: get list of recent changes and comments in chronological order
        responses:
          200:
            body: (Comment | Change)[]
    /names:
      get:
        description: get list of all distinct names from nomenclatural acts in this reference
        responses:
          200:
            body: Name[]
  /search:
    type:  { searchable: {class : "Reference"} }
    get:
      description: search all references
      queryParameters:
        serialKey:
          type: integer
          description: filter by serial
          required: false
        type:
          type: string
          description: filter by reference type
          required: false
        year:
          type: string
          description: filter by year of publication
          required: false
        volume:
          type: string
          description: filter by serial volume
          required: false
        doi:
          type: string
          description: filter by DOI
          required: false
/serial:
  type: collection
  /{key}:
    type:  { modifiable: {class : "Serial"} }
    uriParameters:
      key:
        type: integer
        description: serial key
    /activity:
      get:
        description: get list of recent changes and comments in chronological order
        responses:
          200:
            body: (Comment | Change)[]
  /search:
    type:  { searchable: {class : "Serial"} }
    get:
      queryParameters:
        year:
          type: string
          description: filter by year of publication. The given year must be within the range the serial is known to be active.
          required: false
        issn:
          type: string
          description: filter by ISSN
          required: false
/activity:
  get:
    description: get list of recent activity in the entire system
    responses:
      200:
        body: (Comment | Change)[]
/contributor/{key}:
  uriParameters:
    key:
      type: integer
  get:
    description: get contributor
    responses:
      200:
        body: (Comment | Change)[]
  /activity:
    get:
      description: get list of recent activity from the contributor
      responses:
        200:
          body: (Comment | Change)[]
